{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","key","id","Card","CardBody","className","title","CardText","body","React","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPosts","Form","FormGroup","row","Label","htmlFor","Col","md","Input","rows","Button","color","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3791b44.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../actions/postActions\";\r\n\r\nclass Posts extends React.Component {\r\n  componentWillMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postItems = this.props.posts.map((post) => (\r\n      <div key={post.id}>\r\n        <Card>\r\n          <CardBody>\r\n            <h4 className=\"font-weight-bold\">{post.title}</h4>\r\n            <CardText>{post.body}</CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    ));\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row row-content\">\r\n          <div className=\"post col-12 col-md\">{postItems}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\n\r\nexport const fetchPosts = () => (dispatch) => {\r\n  fetch(\"http://jsonplaceholder.typicode.com/posts\")\r\n    .then((res) => res.json())\r\n    .then((posts) =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts,\r\n      })\r\n    );\r\n};\r\n\r\nexport const createPosts = (postData) => (dispatch) => {\r\n  fetch(\"http://jsonplaceholder.typicode.com/posts\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(postData),\r\n  }).then((res) =>\r\n    res.json().then((post) =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post,\r\n      })\r\n    )\r\n  );\r\n};\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPosts } from \"../actions/postActions\";\r\nimport { Form, FormGroup, Label, Input, Button, Col } from \"reactstrap\";\r\n\r\nclass PostForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      body: \"\",\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body,\r\n    };\r\n\r\n    //call action\r\n    this.props.createPosts(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row row-content\">\r\n          <div className=\"col-12 col-md\">\r\n            <h1 className=\"offset-2\">Post Form</h1>\r\n            <br />\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup row>\r\n                <Label htmlFor=\"title\">Title</Label>\r\n                <Col md={6}>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    onChange={this.onChange}\r\n                    value={this.state.value}\r\n                  />\r\n                </Col>\r\n              </FormGroup>\r\n\r\n              <FormGroup row>\r\n                <Label htmlFor=\"body\">Body</Label>\r\n                <Col md={6}>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    id=\"body\"\r\n                    name=\"body\"\r\n                    rows=\"10\"\r\n                    onChange={this.onChange}\r\n                    value={this.state.body}\r\n                  />\r\n                </Col>\r\n              </FormGroup>\r\n\r\n              <Button type=\"submit\" color=\"primary\" className=\"ml-4\">\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n            <br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostForm.propTypes = {\r\n  createPosts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { createPosts })(PostForm);\r\n","import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\r\nimport store from \"../store\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n};\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {},\r\n  middleware = [thunk],\r\n  store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(...middleware)\r\n      //   window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      //     window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n  );\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\n\nimport Posts from \"./components/Posts\";\nimport PostForm from \"./components/PostForm\";\nimport store from \"./store\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"\">\n          <h1></h1>\n          <PostForm />\n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"bootstrap-social/bootstrap-social.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}